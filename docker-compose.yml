# docker-compose.yml
version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: feature-flags-db
    environment:
      POSTGRES_DB: featureflags
      POSTGRES_USER: app
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d featureflags"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - feature-flags-network

  redis:
    image: redis:7-alpine
    container_name: feature-flags-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - feature-flags-network

  feature-flag-service:
    build: ./feature-flag-service
    container_name: feature-flag-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_URL=jdbc:postgresql://postgres:5432/featureflags
      - DB_USERNAME=app
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - feature-flags-network

  movie-search-service:
    build: ./movie-search-service
    container_name: movie-search-service
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - REDIS_URL=redis://redis:6379
      - OMDB_API_KEY=${OMDB_API_KEY:-your_omdb_api_key_here}
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - feature-flags-network

  # Feature Flag Frontend
  feature-flag-frontend:
    build:
      context: ./feature-flag-frontend
      dockerfile: Dockerfile
    container_name: feature-flag-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api
    ports:
      - "3000:3000"
    depends_on:
      feature-flag-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - feature-flags-network

  # Movie Search Frontend
  movie-search-frontend:
    build:
      context: ./movie-search-frontend
      dockerfile: Dockerfile
    container_name: movie-search-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8081/api
    ports:
      - "3001:3000"
    depends_on:
      movie-search-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - feature-flags-network

networks:
  feature-flags-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data: